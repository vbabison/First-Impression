{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["socket","io","connect","App","useState","me","setMe","stream","setStream","receivingCall","setReceivingCall","caller","setCaller","callerSignal","setCallerSignal","callAccepted","setCallAccepted","idToCall","setIdToCall","callEnded","setCallEnded","name","setName","myVideo","useRef","userVideo","connectionRef","useEffect","navigator","mediaDevices","getUserMedia","video","audio","then","current","srcObject","on","id","data","from","signal","style","textAlign","color","className","playsInline","muted","ref","autoPlay","width","TextField","label","variant","value","onChange","e","target","marginBottom","text","Button","startIcon","fontSize","onClick","destroy","IconButton","aria-label","peer","Peer","initiator","trickle","emit","userToCall","signalData","callUser","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.91dc41c6.chunk.js","sourcesContent":["import Button from \"@material-ui/core/Button\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport TextField from \"@material-ui/core/TextField\"\nimport AssignmentIcon from \"@material-ui/icons/Assignment\"\nimport PhoneIcon from \"@material-ui/icons/Phone\"\nimport React, { useEffect, useRef, useState } from \"react\"\nimport { CopyToClipboard } from \"react-copy-to-clipboard\"\nimport Peer from \"simple-peer\"\nimport io from \"socket.io-client\"\nimport \"./App.css\"\n\n\nconst socket = io.connect('http://localhost:5000')\nfunction App() {\n\tconst [ me, setMe ] = useState(\"\")\n\tconst [ stream, setStream ] = useState()\n\tconst [ receivingCall, setReceivingCall ] = useState(false)\n\tconst [ caller, setCaller ] = useState(\"\")\n\tconst [ callerSignal, setCallerSignal ] = useState()\n\tconst [ callAccepted, setCallAccepted ] = useState(false)\n\tconst [ idToCall, setIdToCall ] = useState(\"\")\n\tconst [ callEnded, setCallEnded] = useState(false)\n\tconst [ name, setName ] = useState(\"\")\n\tconst myVideo = useRef()\n\tconst userVideo = useRef()\n\tconst connectionRef= useRef()\n\n\tuseEffect(() => {\n\t\tnavigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {\n\t\t\tsetStream(stream)\n\t\t\t\tmyVideo.current.srcObject = stream\n\t\t})\n\n\tsocket.on(\"me\", (id) => {\n\t\t\tsetMe(id)\n\t\t})\n\n\t\tsocket.on(\"callUser\", (data) => {\n\t\t\tsetReceivingCall(true)\n\t\t\tsetCaller(data.from)\n\t\t\tsetName(data.name)\n\t\t\tsetCallerSignal(data.signal)\n\t\t})\n\t}, [])\n\n\tconst callUser = (id) => {\n\t\tconst peer = new Peer({\n\t\t\tinitiator: true,\n\t\t\ttrickle: false,\n\t\t\tstream: stream\n\t\t})\n\t\tpeer.on(\"signal\", (data) => {\n\t\t\tsocket.emit(\"callUser\", {\n\t\t\t\tuserToCall: id,\n\t\t\t\tsignalData: data,\n\t\t\t\tfrom: me,\n\t\t\t\tname: name\n\t\t\t})\n\t\t})\n\t\tpeer.on(\"stream\", (stream) => {\n\t\t\t\n\t\t\t\tuserVideo.current.srcObject = stream\n\t\t\t\n\t\t})\n\t\tsocket.on(\"callAccepted\", (signal) => {\n\t\t\tsetCallAccepted(true)\n\t\t\tpeer.signal(signal)\n\t\t})\n\n\t\tconnectionRef.current = peer\n\t}\n\n\tconst answerCall =() =>  {\n\t\tsetCallAccepted(true)\n\t\tconst peer = new Peer({\n\t\t\tinitiator: false,\n\t\t\ttrickle: false,\n\t\t\tstream: stream\n\t\t})\n\t\tpeer.on(\"signal\", (data) => {\n\t\t\tsocket.emit(\"answerCall\", { signal: data, to: caller })\n\t\t})\n\t\tpeer.on(\"stream\", (stream) => {\n\t\t\tuserVideo.current.srcObject = stream\n\t\t})\n\n\t\tpeer.signal(callerSignal)\n\t\tconnectionRef.current = peer\n\t}\n\n\tconst leaveCall = () => {\n\t\tsetCallEnded(true)\n\t\tconnectionRef.current.destroy()\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<h1 style={{ textAlign: \"center\", color: '#fff' }}>First Impressions</h1>\n\t\t<div className=\"container\">\n\t\t\t<div className=\"video-container\">\n\t\t\t\t<div className=\"video\">\n\t\t\t\t\t{stream &&  <video playsInline muted ref={myVideo} autoPlay style={{ width: \"300px\" }} />}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"video\">\n\t\t\t\t\t{callAccepted && !callEnded ?\n\t\t\t\t\t<video playsInline ref={userVideo} autoPlay style={{ width: \"300px\"}} />:\n\t\t\t\t\tnull}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"myId\">\n\t\t\t\t<TextField\n\t\t\t\t\tid=\"filled-basic\"\n\t\t\t\t\tlabel=\"Name\"\n\t\t\t\t\tvariant=\"filled\"\n\t\t\t\t\tvalue={name}\n\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\tstyle={{ marginBottom: \"20px\" }}\n\t\t\t\t/>\n\t\t\t\t<CopyToClipboard text={me} style={{ marginBottom: \"2rem\" }}>\n\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" startIcon={<AssignmentIcon fontSize=\"large\" />}>\n\t\t\t\t\t\tCopy ID\n\t\t\t\t\t</Button>\n\t\t\t\t</CopyToClipboard>\n\n\t\t\t\t<TextField\n\t\t\t\t\tid=\"filled-basic\"\n\t\t\t\t\tlabel=\"ID to call\"\n\t\t\t\t\tvariant=\"filled\"\n\t\t\t\t\tvalue={idToCall}\n\t\t\t\t\tonChange={(e) => setIdToCall(e.target.value)}\n\t\t\t\t/>\n\t\t\t\t<div className=\"call-button\">\n\t\t\t\t\t{callAccepted && !callEnded ? (\n\t\t\t\t\t\t<Button variant=\"contained\" color=\"secondary\" onClick={leaveCall}>\n\t\t\t\t\t\t\tEnd Call\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<IconButton color=\"primary\" aria-label=\"call\" onClick={() => callUser(idToCall)}>\n\t\t\t\t\t\t\t<PhoneIcon fontSize=\"large\" />\n\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t)}\n\t\t\t\t\t{idToCall}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t{receivingCall && !callAccepted ? (\n\t\t\t\t\t\t<div className=\"caller\">\n\t\t\t\t\t\t<h1 >{name} is calling...</h1>\n\t\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={answerCall}>\n\t\t\t\t\t\t\tAnswer\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t) : null}\n\t\t\t</div>\n\t\t</div>\n\t\t</>\n\t)\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}